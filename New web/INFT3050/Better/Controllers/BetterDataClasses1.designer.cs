#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Better.App_Code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-Better-20171013095525")]
	public partial class BetterDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetUserTitan(AspNetUserTitan instance);
    partial void UpdateAspNetUserTitan(AspNetUserTitan instance);
    partial void DeleteAspNetUserTitan(AspNetUserTitan instance);
    partial void InsertAspNetTitan(AspNetTitan instance);
    partial void UpdateAspNetTitan(AspNetTitan instance);
    partial void DeleteAspNetTitan(AspNetTitan instance);
    #endregion
		
		public BetterDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BetterDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetUserTitan> AspNetUserTitans
		{
			get
			{
				return this.GetTable<AspNetUserTitan>();
			}
		}
		
		public System.Data.Linq.Table<AspNetTitan> AspNetTitans
		{
			get
			{
				return this.GetTable<AspNetTitan>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserTitans")]
	public partial class AspNetUserTitan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _UserId;
		
		private string _TitanID;
		
		private System.Nullable<bool> _Retired;
		
		private EntityRef<AspNetTitan> _AspNetTitan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnTitanIDChanging(string value);
    partial void OnTitanIDChanged();
    partial void OnRetiredChanging(System.Nullable<bool> value);
    partial void OnRetiredChanged();
    #endregion
		
		public AspNetUserTitan()
		{
			this._AspNetTitan = default(EntityRef<AspNetTitan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitanID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string TitanID
		{
			get
			{
				return this._TitanID;
			}
			set
			{
				if ((this._TitanID != value))
				{
					if (this._AspNetTitan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitanIDChanging(value);
					this.SendPropertyChanging();
					this._TitanID = value;
					this.SendPropertyChanged("TitanID");
					this.OnTitanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Retired", DbType="Bit")]
		public System.Nullable<bool> Retired
		{
			get
			{
				return this._Retired;
			}
			set
			{
				if ((this._Retired != value))
				{
					this.OnRetiredChanging(value);
					this.SendPropertyChanging();
					this._Retired = value;
					this.SendPropertyChanged("Retired");
					this.OnRetiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTitan_AspNetUserTitan", Storage="_AspNetTitan", ThisKey="TitanID", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetTitan AspNetTitan
		{
			get
			{
				return this._AspNetTitan.Entity;
			}
			set
			{
				AspNetTitan previousValue = this._AspNetTitan.Entity;
				if (((previousValue != value) 
							|| (this._AspNetTitan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetTitan.Entity = null;
						previousValue.AspNetUserTitans.Remove(this);
					}
					this._AspNetTitan.Entity = value;
					if ((value != null))
					{
						value.AspNetUserTitans.Add(this);
						this._TitanID = value.Id;
					}
					else
					{
						this._TitanID = default(string);
					}
					this.SendPropertyChanged("AspNetTitan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetTitans")]
	public partial class AspNetTitan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _TitanName;
		
		private string _Exp;
		
		private string _Wins;
		
		private string _Losses;
		
		private string _Draws;
		
		private System.Nullable<bool> _Retired;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<AspNetUserTitan> _AspNetUserTitans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnTitanNameChanging(string value);
    partial void OnTitanNameChanged();
    partial void OnExpChanging(string value);
    partial void OnExpChanged();
    partial void OnWinsChanging(string value);
    partial void OnWinsChanged();
    partial void OnLossesChanging(string value);
    partial void OnLossesChanged();
    partial void OnDrawsChanging(string value);
    partial void OnDrawsChanged();
    partial void OnRetiredChanging(System.Nullable<bool> value);
    partial void OnRetiredChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public AspNetTitan()
		{
			this._AspNetUserTitans = new EntitySet<AspNetUserTitan>(new Action<AspNetUserTitan>(this.attach_AspNetUserTitans), new Action<AspNetUserTitan>(this.detach_AspNetUserTitans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitanName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string TitanName
		{
			get
			{
				return this._TitanName;
			}
			set
			{
				if ((this._TitanName != value))
				{
					this.OnTitanNameChanging(value);
					this.SendPropertyChanging();
					this._TitanName = value;
					this.SendPropertyChanged("TitanName");
					this.OnTitanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exp", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Exp
		{
			get
			{
				return this._Exp;
			}
			set
			{
				if ((this._Exp != value))
				{
					this.OnExpChanging(value);
					this.SendPropertyChanging();
					this._Exp = value;
					this.SendPropertyChanged("Exp");
					this.OnExpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wins", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Wins
		{
			get
			{
				return this._Wins;
			}
			set
			{
				if ((this._Wins != value))
				{
					this.OnWinsChanging(value);
					this.SendPropertyChanging();
					this._Wins = value;
					this.SendPropertyChanged("Wins");
					this.OnWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Losses", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Losses
		{
			get
			{
				return this._Losses;
			}
			set
			{
				if ((this._Losses != value))
				{
					this.OnLossesChanging(value);
					this.SendPropertyChanging();
					this._Losses = value;
					this.SendPropertyChanged("Losses");
					this.OnLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Draws", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Draws
		{
			get
			{
				return this._Draws;
			}
			set
			{
				if ((this._Draws != value))
				{
					this.OnDrawsChanging(value);
					this.SendPropertyChanging();
					this._Draws = value;
					this.SendPropertyChanged("Draws");
					this.OnDrawsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Retired", DbType="Bit")]
		public System.Nullable<bool> Retired
		{
			get
			{
				return this._Retired;
			}
			set
			{
				if ((this._Retired != value))
				{
					this.OnRetiredChanging(value);
					this.SendPropertyChanging();
					this._Retired = value;
					this.SendPropertyChanged("Retired");
					this.OnRetiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetTitan_AspNetUserTitan", Storage="_AspNetUserTitans", ThisKey="Id", OtherKey="TitanID")]
		public EntitySet<AspNetUserTitan> AspNetUserTitans
		{
			get
			{
				return this._AspNetUserTitans;
			}
			set
			{
				this._AspNetUserTitans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserTitans(AspNetUserTitan entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTitan = this;
		}
		
		private void detach_AspNetUserTitans(AspNetUserTitan entity)
		{
			this.SendPropertyChanging();
			entity.AspNetTitan = null;
		}
	}
}
#pragma warning restore 1591
